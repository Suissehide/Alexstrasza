{% extends 'layout.html.twig' %}

{% block title %}Index{% endblock %}

{% block stylesheets %}{% endblock %}

{% form_theme form _self %}

{% block _article_image_widget %}
    <div id="upload" method="post" action="upload.php" enctype="multipart/form-data">
        <div id="drop">
            Glisser/d√©poser une image

            <a>
                <span class="fa fa-upload"></span>
                Charger</a>
            <input type="file" name="upl" {{ block('widget_attributes') }} multiple="multiple"/>
        </div>
        <ul></ul>
    </div>
{% endblock %}

{% block page_content %}
    <div class="article-wrapper">
        <div class="row">
            <div class="col-md-12 article-header">
                Nouvel article
            </div>
        </div>

        <div class="article-form">
            {{ form_start(form) }}
            {{ form_errors(form) }}

            <div class="form-row">
                {{ form_widget(form.titre) }}
            </div>
            <div class="form-row">
                {{ form_widget(form.contenu) }}
            </div>

            {{ form_row(form.image, {'required': false}) }}
            {{ form_widget(form.url, {'required': false}) }}

            <a class="sondage-row" data-toggle="modal" href="#addSondage">
                <div class="btn-round">
                    <i class="fa fa-plus"></i>
                </div>
                <p>
                    Ajouter un sondage</p>
            </a>

            {{ form_widget(form.sondage) }}

            <button type="submit" class="button submit-btn">Ajouter</button>

            {{ form_row(form._token) }}
            {{ form_end(form, {'render_rest' : false}) }}
        </div>
    </div>

    <div class="modal fade" id="addSondage" tabindex="-1" role="dialog" aria-labelledby="modalSondage" aria-hidden="true">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        <span class="glyphicon glyphicon-warning"></span>
                        Sondage
                    </h4>
                </div>
                <div class="modal-body">
                    {{ form_start(formSondage) }}
                    {{ form_errors(formSondage) }}

                    {{ form_widget(formSondage.titre) }}

                    <div class="scrollbar list-wrapper">
                        <ul class="options" data-prototype="{{ form_widget(formSondage.options.vars.prototype)|e('html_attr') }}"></ul>
                    </div>
                    <a class="sondage-row option-add">
                        <div class="btn-round">
                            <i class="fa fa-plus"></i>
                        </div>
                        <p>
                            Ajouter une option</p>
                    </a>

                    {{ form_row(formSondage._token) }}
                    {{ form_end(formSondage, {'render_rest' : false}) }}
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn button-danger pull-left" data-dismiss="modal">
                        <span class="glyphicon glyphicon-remove"></span>
                        Annuler</button>
                    <button id="submit" class="btn button-default pull-right success">Ajouter</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('js/jquery.knob.js') }}"></script>
    <script src="{{ asset('js/jquery.ui.widget.js') }}"></script>
    <script src="{{ asset('js/jquery.iframe-transport.js') }}"></script>
    <script src="{{ asset('js/jquery.fileupload.js') }}"></script>
    <script type="text/javascript">

        /* Sondage Option
	    ================= */
        var $addTagLink = $('.option-add');
        var $collectionHolder = $('ul.options');
        $collectionHolder.data('index', $collectionHolder.find(':input').length);

        $addTagLink.on('click', function (e) {
            e.preventDefault();
            addTagForm($collectionHolder);
        });

        function addTagForm($collectionHolder) {
            var prototype = $collectionHolder.data('prototype');
            var index = $collectionHolder.data('index');
            var newForm = prototype.replace(/__name__/g, index);
            $collectionHolder.data('index', index + 1);
            var $newFormLi = $('<li class="card"></li>').append(newForm);
            $newFormLi.append('<a class="pull-left btn btn-danger remove-tag"><span class="fa fa-times"></span></a>');
            $collectionHolder.append($newFormLi);
        }

        $(".modal").on("click", ".remove-tag", function (e) {
            e.preventDefault();
            $(this).parent().remove();
            return false;
        });

        /* Upload
	    ================= */
        $(function () {

            var ul = $('#upload ul');

            $('#drop a').click(function () {
                // Simulate a click on the file input button
                // to show the file browser dialog
                $(this).parent().find('input').click();
            });

            // Initialize the jQuery File Upload plugin
            $('#upload').fileupload({
                // This element will accept file drag/drop uploading
                dropZone: $('#drop'),
                // This function is called when a file is added to the queue;
                // either via the browse button, or via drag/drop:
                add: function (e, data) {
                    var tpl = $('<li class="working"><input type="text" value="0" data-width="32" data-height="32"' + ' data-fgColor="#db7093" data-readOnly="1" data-bgColor="#3e4043" /><p></p><span></span></li>');
                    // Append the file name and file size
                    tpl
                        .find('p')
                        .text(data.files[0].name)
                        .append('<i>' + formatFileSize(data.files[0].size) + '</i>');
                    // Add the HTML to the UL element
                    data.context = tpl.appendTo(ul);
                    // Initialize the knob plugin
                    tpl.find('input').knob();
                    // Listen for clicks on the cancel icon
                    tpl.find('span').click(function () {
                        if (tpl.hasClass('working')) {
                            jqXHR.abort();
                        }
                        tpl.fadeOut(function () {
                            tpl.remove();
                        });
                    });
                    // Automatically upload the file once it is added to the queue
                    // var jqXHR = data.submit();
                },

                progress: function (e, data) {
                    // Calculate the completion percentage of the upload
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    // Update the hidden input field and trigger a change
                    // so that the jQuery knob plugin knows to update the dial
                    data.context.find('input').val(progress).change();

                    if (progress == 100) {
                        data.context.removeClass('working');
                    }
                },
                fail: function (e, data) {
                    // Something has gone wrong!
                    data.context.addClass('error');
                }
            });

            // Prevent the default action when a file is dropped on the window
            $(document).on('drop dragover', function (e) {
                e.preventDefault();
            });

            // Helper function that formats the file sizes
            function formatFileSize(bytes) {
                if (typeof bytes !== 'number') {
                    return '';
                }
                if (bytes >= 1000000000) {
                    return (bytes / 1000000000).toFixed(2) + ' GB';
                }
                if (bytes >= 1000000) {
                    return (bytes / 1000000).toFixed(2) + ' MB';
                }
                return (bytes / 1000).toFixed(2) + ' KB';
            }
        });
    </script>
{% endblock %}